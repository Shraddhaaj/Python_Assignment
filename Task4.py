# -*- coding: utf-8 -*-
"""Task 4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13HJfnUFP5_-1EUnNzd49tVNwLZ6sVb4T
"""

#. 1. Write a program to reverse a string.
#Sample input: “1234abcd”
#Expected output: “dcba4321”



x =  "1234abcd"
y = x[::-1]
print (y)

#2. Write a function that accepts a string and prints the number of uppercase letters and lowercase letters.
#Sample input: “abcSdefPghijQkl”
#Expected Output: No. of Uppercase characters : 3 No. of Lower case Characters : 12

#ANS:

my_word = input ("Enter a word:" )
lower_count = sum(map(str.islower, my_word))
upper_count = sum(map(str.isupper, my_word)) 
print ("upper_count: ", upper_count)
print ("lower_count: ", lower_count)

#3. Create a function that takes a list and returns a new list with unique elements of the first list.
#ANS:

def unique_list(firstlist):
    unique = []
    for item in firstlist :
        if item not in unique:
            unique.append(item)
    return unique

print(unique_list([6,7,8,5,4,6,8,7,9,12,15,12,5,1,7,1]))

#4. Write a program that accepts a hyphen-separated sequence of words as input and prints the words in a hyphen-separated sequence after sorting them alphabetically.
#ANS:

items=[a for a in input().split('-')]
items.sort()
print('-'.join(items))

#5. Write a program that accepts a sequence of lines as input and prints the lines after making all characters in the sentence capitalized.
#Sample input: Hello world Practice makes man perfect
#Expected output: HELLO WORLD PRACTICE MAKES MAN PERFECT
#ANS:

lines = []
while True:
  sentence_to_be_capitalized = input("Sentence_to_be_capitalized:" )
  if sentence_to_be_capitalized:
    lines.append(sentence_to_be_capitalized.upper())
  else:
    break;
  for sentence_to_be_capitalized in lines:
   print ("Sentence_to_be_capitalized:", sentence_to_be_capitalized)

# 6. Define a function that can receive two integral numbers in string form and compute their sum and print it in the console.
#ANS:

num1= input ("")
num2 = input ("")

sum = int(num1) + int(num2)

print ("Sum:" , sum)

#7. Define a function that can accept two strings as input and print the string with the maximum length in the console. If two strings have the same length, then the function should
#print both the strings line by line.
#ANS.


g= input("First string :" )
b= input("Second string: ")

l1 = len(g)
l2 = len(b)

if l1>l2:
  print(g)
elif l2>l1:
  print(b)
else:
  print(g)
  print(b)

#8. Define a function which can generate and print a tuple where the values are square of numbers between 1 and 20 (both 1 and 20 included).

#ANS:

def printTuple():
  list8= [i ** 2 for i in range(1, 21)]
  print(tuple(list8))

printTuple()

#9. Write a function called showNumbers that takes a parameter called limit. It should print all the numbers between 0 and limit with a label to identify the even and odd numbers.
#Sample input: show Numbers(3) (where limit=3)
#Expected output:
#0 EVEN
#1 ODD
#2 EVEN
#3 ODD

#ANS:

def shownumber(limit):
  for i in range(0, limit):
    if i==0:
      print(i,end=" ")
      print("EVEN")

    elif i%2==0:
      print(i,end=" ")
      print("EVEN")

    else:
      print(i,end=" ")
      print("ODD")
print(shownumber(4))

#10. Write a program which uses filter() to make a list whose elements are even numbers between 1 and 20 (both included).

#ANS:

def even(x):
    return x%2==0

evenNumbers = filter(even, range(1,21))
print(list(evenNumbers))

# 11. Write a program which uses map() and filter() to make a list whose elements are squares of even numbers in [1,2,3,4,5,6,7,8,9,10].
#Hints: Use filter() to filter even elements of the given listUse map() to generate a list of squares of the numbers in the filtered list. Use lambda() to define anonymous functions.

#ANS:

list11 = [1,2,3,4,5,6,7,8,9,10]
evenNumbers = map(lambda x: x**2, filter(lambda x: x%2==0, list11))
print (list(evenNumbers))

#12. Write a function to compute 5/0 and use try/except to catch the exceptions.
#ANS:

def divide():
    return 1/0

try:
  divide()
except ZeroDivisionError as ze:
    print("zero division error")
except:
    print("exception")

#13. Flatten the list [1,2,3,4,5,6,7] into 1234567 using reduce().
#ANS:


import functools
import operator
from functools import reduce


List_2D = [1,2,3,4,5,6] #List to be flattened

t= reduce (lambda t,e:t+e,['1','2','3','4','5','6'])
print(t)

#14. Write a program in Python to find the values which are not divisible by 3 but are a multiple of 7.Make sure to use only higher order functions.

r = filter(lambda i:i%3 != 0 and i%7 == 0, [3,8,10,15,20,25,30,28,70,14,21])
print(list(r))

#15. Write a program in Python to multiply the elements of a list by itself using a traditional function and pass the function to map() to complete the operation.

#ANS:


d= map(lambda j:j**2, range(1,11) )
print(list (d))

#16. What is the output of the following codes:
#(i) 
def foo():
  try:
    return 1
  finally:
      return 2
  k = foo()
  print(k)


## None

#16.(ii) 
def a():
  try:
    f(x, 4)
  finally:
    print('after f')
    print('after f?')
  a()

  # None